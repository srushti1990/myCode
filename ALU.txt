/*
This program demonstrates simple ALU functions of the processor.
*/
#include<stdio.h>
#include<conio.h>
int add(int, int);
int sub(int, int);
int get2scomp(int);
int mul(int, int);
int div_mod(int, int, int);
int overflow_bit = 0;
int dividebyzero = 0;
void main()
{
	clrscr();
	//int div1 = -222, div2 =-10, mode = 1;
	//int mul1 = 638, mul2 = 116;
	//int add1 = 8392, add2 = 2133;
	//int sub1 = -2, sub2 = 32767;
	//printf("addition %d\n", add(add1,add2));
	//printf("overflow bit for a as %d and b as %d = %d \n", add1, add2, overflow_bit);
	//printf("multiply: %d\n", mul(mul1, mul2));
	//printf("overflow bit for a as %d and b as %d = %d \n", mul1, mul2, overflow_bit);
	//printf("div %d \n", div_mod(div1,div2,mode));
	//printf("2's complement of %d is %d \n", n, get2scomp(n));
	//printf("subtraction %d\n", sub(sub1,sub2));
	//printf("overflow bit for a as %d and b as %d = %d \n", sub1, sub2, overflow_bit);
	getch();
}

int add(int a, int b)
{
	int na = a, nb = b;
	int carry;
	while(b!=0)
	{
		carry = a&b;
		a=a^b;
		b=carry<<1;
	}

	unsigned int sbita = ((unsigned)na>>31)&1, sbitb = ((unsigned)nb>>31)&1, sbitc = ((unsigned)a>>31)&1;
	//printf("signa = %d signb = %d and signc = %d\n", sbita, sbitb, sbitc);
	if(sbita == sbitb)
		overflow_bit = sbita^sbitc;
	else
		overflow_bit = 0;
	printf("overflow bit for a as %d and b as %d = %d \n", na, nb, overflow_bit);
	return a;
}
int sub(int a, int b)
{
	int minusb = get2scomp(b);
	return(add(a, minusb));
}
int get2scomp(int c)
{
	return(add(~c,1));
}
int mul(int a, int b)
{
	//printf("a is %d\n", a);
	int tempa=0, over=0;
	if(b<0)
	{
		a=get2scomp(a); b=get2scomp(b);
	}
	//printf("a is %d and b is %d\n", a,b);
	int sum = 0, n = 1;
	while(b>=n & over==0)
	{
		if(b&n) { sum =  add(sum, a);}
		if(overflow_bit==1)	break;
		tempa = a;
		a=a<<1;
		over = sub(a>>31,tempa>>31);
		//printf("over is %d \n", over);
		n=n<<1;
		if(b>=n & over!=0)	overflow_bit=1;
		else	overflow_bit=0;
	}
	return sum;
}
int div_mod(int a, int b, int mode)  //mode 1 for div and 0 for mod
{
	int sign = 0, quo = 0, rem = 0;
	if(a<0)
	{
		a=get2scomp(a); sign=sign^1;
	}
	if(b<0)
	{
		b=get2scomp(b); sign=sign^1;
	}
	if(b>0)
	{
		while(a>=b)
		{
			a = sub(a,b);
			quo = add(quo, 1);
		}
	}
	else
	{
		dividebyzero = 1;
	}
	if(a>0)		rem = a;
	else rem = 0;
	printf("dividebyzero bit is %d \n", dividebyzero);
	if(mode)
	{
		if(sign == 1) quo = get2scomp(quo);
		return quo;
	}
	else
	{
		if(rem<0) rem = get2scomp(rem);
		return rem;
	}
}